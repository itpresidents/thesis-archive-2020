{"post_id":315,"student_id":"24","student_name":"Dominic Barrett","student_slug":"dominic-barrett","advisor_id":"123","advisor_name":"Kathleen Sullivan","advisor_slug":"kms829","project_title":"Going Forward","project_question":"<i>Going Forward: A Recipe Book for the Continuing Creative Technologist</i> is a tutorial book serving artists who have started making with technology. Not a beginners guide, nor for in depth advanced concepts, <i>Going Forward</i> positions itself as the second book, or what you do after your first class.\r\n<br />\r\n<br />\r\nYet as you continue to read, the lessons become strange. Projects become unusual, and code comments begin to fill with short stories. More and more, the technical lessons mutate into the poetic. Further and further the transformation takes place, until the reader realizes that this is anything but the normal programming tutorial.\r\n<br />\r\n<br />\r\nIt is common for those starting to program in hopes of making art to have doubts in their abilities. Despite completing introductory courses, they insist they still aren’t “real programmers”. Their beginner skills make achieving sophisticated output feel miles away. Console errors that plague them for days are fixed by “better” programmers in minutes. Impostor syndrome runs rampant. Motivation is sapped by obscure and idiosyncratic platform bugs, broken drivers, and unrequested operating system updates.\r\n<br />\r\n<br />\r\nThis is not fertile ground for newcomers, let alone artists.\r\n<br />\r\n<br />\r\nIt is enough to make any sensible person want to quit. These common, and reasonable emotions stand in the way of programmers making programs. Which to me, is a programming problem. An emotional one. How do we solve it?\r\n<br />\r\n<br />\r\nWhile development as a creative technologist does require more advanced technical and programming skill, a different kind of lesson is simultaneously required. It needs to be something that lets people know that these struggles aren’t uncommon. And not just for beginners, but for professionals. The experts are on Stack Overflow. Your favorite artist is in the forums, describing a bug that can’t be replicated by anyone but them.\r\n<br />\r\n<br />\r\nThe lesson of <i>Going Forward</i> is a depiction of our creative technologist culture. It’s a story about our ups and downs. How our technology isn’t a hurdle, but where our art happens. A reminder that we put ourselves in our art. And when things finally work, against all odds, the magic at the other end is worth it.","short_description":"<i>Going Forward</i> is a tutorial book for the continuing creative technologist. Yet as it progresses, it strays from instruction and reveals itself as something unexpected. Technical transforms into narrative. The story: the real life of creative technologists, and the struggles of making art with technology.","further_reading":"<p><b>Research</b></p>\n<p>Art therapy</p>\n<p>I’m imparting a personal lesson during the act of creating. In brief, I found myself intuitively crafting art therapy for coders. My playtesting and research brought me to Professor Berberian at NYU Steinhardt’s Art Therapy department. She was excited about my ideas and generally confirmed my hunch:</p>\n<p>Being emotionally discouraged prevents you from making programs just as much as technical hurdles. If technology can be an artistic medium, guided programming practices can be art therapy for processing these emotional hurdles.</p>\n<p>Further, discussions of ‘ulterior motives’ in terms of art therapy goals was enlightening. Initial intent for say, a painting class, could be therapy through expressions of emotion by making art. And through the satisfaction of learning a skill. However, a hosted art show at the end of the process can bring in an audience that gives positive affirmation on a whole other level. You have made something people admire, you have made art.</p>\n<p>In the coding world we can see constructionism and experiential learning pedagogical ethos at play. You learn code by coding, making projects, or in play and activity that mimics the act of coding. And this is a wonderful, and useful approach. However, an extra step that explicitly involves ethos of art creation could provide a whole other set of lessons and motivations.</p>\n<p>Make someone code a program and they’ll know how to code.</p>\n<p>Make someone code art and they’ll want to code.</p>\n<p><b>Live Testing</b></p>\n<p>In some of my live testing sessions I noticed interesting behavior. People engage with tutorial and narrative text differently, which is common sense. But even when a test user was told explicitly that this was not a normal tutorial, but a tutorial that turns into something else, their “tutorial muscle memory” kicked in. Skipping over the text, they went straight for the source code. Quickly flicking up and down, in a non-linear fashion. Then they abruptly stopped.</p>\n<p>“With any technical tutorial, I ignore almost everything in writing and scan until I find only the piece of information I need to do what I want. But when I saw that the code comments had something else going on, I stopped.”</p>\n<p>They then proceeded to go to the very top of the page, and then in its entirety read every word including the source code, start to finish. I asked what happened.</p>\n<p>“Once I knew it was a story, I knew I had to read it like a story.”</p>\n<p>2nd person: lesson, performance, story<br />\nBut what is a step by step guide if not an overly optimistic second person story? It has an unreliable narrator that obscures all of the errors, foibles, and distractions involved in your actual learning. And in an alternate reading of the tutorial form, it also obscures the act of performing.</p>\n<p>My interest in the tutorial as ripe artistic ground comes from previous work I did involving Fluxus event scores. A performance art form that involves sets of commands, the event score is a set of imperative statements for performance artists to execute. Depending on the event score composer, the word “you” is even explicitly written. </p>\n<p>My first explorations in this direction was towards reading lines of code as possible event scores. Not just as pieces of art for the computer perform, but also as pieces of poetry bourne of our own minds and souls.</p>\n<p>However, any programmer will tell you that tutorials, examples, and guides are just as much part of the programming experience as the coding itself. A following of a tutorial seemed an even more appropriate venue for my sentiment: invocation of the Romantic in regards to not just the product of tech art practice, but during the process. Mostly in part because it is in the process that we need this inspiration the most, where the motivating end goal seems as elusive as ever. During those un-Romantic struggles.</p>\n<p><b>Remote Testing and Interviews</b></p>\n<p>While developing my tutorials and making them available online, I defined some potential audiences in my call for testers. I invited people who felt technically competent in programming, but were looking for new and fresh ways to use their existing skills. Also, I asked for people who felt like they “still aren’t programmers”, or “secretly” still didn’t know the material from their first classes.</p>\n<p>There were many respondents. Including many people who had made amazing things, but still didn’t feel like they were programmers. Multiple people also were very appreciative of the anonymous nature of my testing, as they were reticent to publicly admit how much they didn’t remember from their intro classes.</p>\n<p>Some people thought my initial tutorial language was too simplistic, but appreciated new ways of looking at programming concepts they had learned. Other thought of the material as too hard and confusing. It became clear to me that possibly the reason a “second programming book” genre doesn’t exist is because even though many people desire it, their needs are wildly different. Some want new challenges, some want new ideas for the old concepts, and other simply needed a reprise of their first lessons.</p>\n<p>Lack of direction, lack of inspiration in regards to your medium, bouts of impostor syndrome and lack of faith in your abilities. Are there ways to address all of them at the same time?</p>\n<p><b>Going Forward</b></p>\n<p>\"Going Forward\" is a book that attempts to address these pitfalls in an unorthodox and playful way. A review of using objects in Javascript eventually asks you to tell your life story. Adding MIDI to your old projects prompts you to not only write better code comments for next time, but to appreciate how far you’ve come. In second person, you struggle to motivate yourself to code after a long day at work. Unrendered text speaks of strife, but what is rendered to the screen is instead an affirmation. As an instructor, I expose the bizarre bugs I came across just to do something simple. Monet takes an unexpected trip to the hardware store for screws. Backup input options for your sketch aren’t just good UI practice, but save your hypothetical performance in a West Village poetry reading described at length.</p>\n<p>Programming, troubleshooting, conceiving, critiquing. Art and code, simple and complex. Victory, defeat. Struggle, breakthrough. Energized, exhausted. Loving it, hating it.</p>\n<p>Our practice as creative technologists is all of these, mashed up together and in no particular order. Depicting our culture in a wild yet honest fashion seems a fitting form to me. It is what we do and how we do it. I wanted to make a book that teaches us that, and also celebrates it. The last lesson being that it is in fact worth celebrating.</p>\n","portfolio_icon":{"src":"https://itp.nyu.edu/thesis2018/wp-content/uploads/2018/04/plug_tongue_320x240.jpg","title":"plug_tongue_320x240","alt":"Power cable close to a tongue","caption":"Going Forward Thumbnail"},"topics":[{"name":"Education","slug":"education"},{"name":"Narrative","slug":"narrative"}],"video_presentation_url":"https://player.vimeo.com/video/269185701","video_documentation_url":"","project_url":"http://dominicbarrett.com/goingforward/","description":"","featured_image":[{"src":"https://itp.nyu.edu/thesis2018/wp-content/uploads/2018/04/plug_tongue_320x240.jpg","title":"plug_tongue_320x240","alt":"Power cable close to a tongue","caption":"Going Forward Thumbnail"}],"slide_show":[{"src":"https://itp.nyu.edu/thesis2018/wp-content/uploads/2018/04/plug_arduino_workspace.png","title":"plug_arduino_workspace","alt":"Arduino, laptop, and cords workspace","caption":""},{"src":"https://itp.nyu.edu/thesis2018/wp-content/uploads/2018/04/midi_color-bounce_window-3.png","title":"midi_color-bounce_window-3","alt":"Screen shot of program, with other multicolored windows open alongside it","caption":""},{"src":"https://itp.nyu.edu/thesis2018/wp-content/uploads/2018/04/touching_old_jeans.jpg","title":"touching_old_jeans","alt":"Closeup of white denim material with laptop in the background","caption":""},{"src":"https://itp.nyu.edu/thesis2018/wp-content/uploads/2018/04/plug_tongue_960_540.png","title":"plug_tongue_960_540","alt":"Two prong power cable close to a face sticking out their tongue","caption":""}]}